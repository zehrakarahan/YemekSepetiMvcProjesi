// <auto-generated />
using System;
using MarketE_Commerce_Site.Repository.Concrete.EntityFrameWork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MarketE_Commerce_Site.Migrations.EcommerceDb
{
    [DbContext(typeof(EcommerceDbContext))]
    partial class EcommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MarketE_Commerce_Site.Entity.Categories", b =>
                {
                    b.Property<int>("CategoriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoriesName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CategoriesId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MarketE_Commerce_Site.Entity.CheckOut", b =>
                {
                    b.Property<int>("CheckOutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Address2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CheckOutLineId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsApprovePayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PostCode")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Telephone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Total")
                        .HasColumnType("double");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CheckOutId");

                    b.ToTable("CheckOuts");
                });

            modelBuilder.Entity("MarketE_Commerce_Site.Entity.CheckOutLine", b =>
                {
                    b.Property<int>("CheckOutLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CheckOutNumber")
                        .HasColumnType("int");

                    b.Property<string>("ProductCodes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("double");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CheckOutLineId");

                    b.ToTable("CheckOutLines");
                });

            modelBuilder.Entity("MarketE_Commerce_Site.Entity.MainPage", b =>
                {
                    b.Property<int>("MainPageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LogoImage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MailAdress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NewsContext")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NewsHeader")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("NewsIsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PhoneNumber1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SkypeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MainPageId");

                    b.ToTable("MainPageSetups");
                });

            modelBuilder.Entity("MarketE_Commerce_Site.Entity.MainSliderSetup", b =>
                {
                    b.Property<int>("MainSliderSetupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActiveFirsSlider")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActiveSecondSlider")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MainSliderImage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MainSliderLongContex")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MainSliderSmallContex")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MainSliderSetupId");

                    b.ToTable("MainSliderSetups");
                });

            modelBuilder.Entity("MarketE_Commerce_Site.Entity.Products", b =>
                {
                    b.Property<int>("ProductsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Bestsellers")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("BrutProductPrice")
                        .HasColumnType("double");

                    b.Property<int?>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNew")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("NetProductPrice")
                        .HasColumnType("double");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductImage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProductSmallDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ShippingDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("ShippingPrice")
                        .HasColumnType("double");

                    b.Property<int?>("SubCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("cancellationProcedure")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("productIsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ProductsId");

                    b.HasIndex("CategoriesId");

                    b.HasIndex("SubCategoriesId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MarketE_Commerce_Site.Entity.SubCategories", b =>
                {
                    b.Property<int>("SubCategoriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoriesName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SubCategoriesId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("MarketE_Commerce_Site.Entity.Products", b =>
                {
                    b.HasOne("MarketE_Commerce_Site.Entity.Categories", "categories")
                        .WithMany()
                        .HasForeignKey("CategoriesId");

                    b.HasOne("MarketE_Commerce_Site.Entity.SubCategories", "SubCategories")
                        .WithMany()
                        .HasForeignKey("SubCategoriesId");
                });
#pragma warning restore 612, 618
        }
    }
}
